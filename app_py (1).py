# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sZR7eD0QXC1Qg0NC6h35dESPXPNLfLj3
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import os
import gdown

# Define Google Drive file ID (from shared link)
# MAKE SURE THIS IS THE ACTUAL FILE ID OF THE .h5 MODEL FILE!
FILE_ID = "1vNKhTIZ7zzs1vsMHoUjcAB7wmpMG9ahA" # <-- Use the file ID directly

MODEL_PATH = "pneumonia_detection_model.h5"

# Download model if not present
if not os.path.exists(MODEL_PATH):
    with st.spinner("Downloading model..."):
        # Use the file ID directly with gdown
        gdown.download(id=FILE_ID, output=MODEL_PATH, quiet=False)

# Load model
@st.cache_resource
def load_model():
    # Check if the model file exists after download
    if not os.path.exists(MODEL_PATH):
        st.error("Model file not found after download!")
        # You might want to raise an exception or handle this error differently
        return None
    try:
        return tf.keras.models.load_model(MODEL_PATH)
    except Exception as e:
        st.error(f"Error loading model: {e}")
        # You might want to raise an exception or handle this error differently
        return None


model = load_model()

# Only proceed if the model loaded successfully
if model is not None:
    # UI
    st.title("Pneumonia Detection from Chest X-ray")
    uploaded_file = st.file_uploader("Upload a Chest X-ray Image", type=["jpg", "jpeg", "png"])

    if uploaded_file:
        img = Image.open(uploaded_file).convert("RGB")
        st.image(img, caption="Uploaded Image", use_column_width=True)

        # Preprocess
        img = img.resize((224, 224))
        img_array = np.array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        # Predict
        pred = model.predict(img_array)[0][0]
        result = "PNEUMONIA" if pred > 0.5 else "NORMAL"
        st.subheader(f"Prediction: {result}")
        st.write(f"Confidence: {pred:.2f}")
else:
    st.error("Application could not start because the model failed to load.")